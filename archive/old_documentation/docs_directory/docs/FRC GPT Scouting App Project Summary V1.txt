**FRC GPT Scouting App Project Summary**

---

**Project Purpose:**
Build a dynamic, game-agnostic scouting and picklist assistant for FIRST Robotics Competition (FRC) teams. The system combines live scouting, superscouting, The Blue Alliance (TBA) API data, and Statbotics data into a Unified Event Dataset.

---

**Technology Stack:**
- **Frontend:** React 18 + Vite + Tailwind CSS
- **Backend:** FastAPI (Python 3.11+, async)
- **Database/Storage:** Google Sheets (read/write access via service account)
- **External APIs:**
  - The Blue Alliance (TBA) API (REST)
  - Statbotics Python SDK
- **Hosting:** Local development on Windows laptop, cloud-friendly architecture
- **Version Control:** Git + GitHub

---

**Core System Components:**

- **Google Sheets Service:** Connects to a Google Sheet for pulling match scouting and superscouting data.
- **Statbotics Client:**
  - Pulls all **active** teams for the current FRC season.
  - Handles pagination automatically.
  - Catches and safely handles warnings about missing data.
- **TBA Client:**
  - Pulls event-specific teams, matches, and rankings.
  - Future upgrades will allow refreshing fast/slow data separately.
- **Unified Event Data Service:**
  - Combines scouting data, superscouting data, TBA event data, and Statbotics data.
  - Creates a full, validated event dataset in JSON format.
  - Auto-sanitizes missing/null fields for safe downstream use.
- **Schema Learning Wizard:**
  - GPT reads the provided scouting and superscouting sheets.
  - Auto-generates a mapping file (`schema_2025.json`, `schema_superscout_2025.json`).

---

**Folder and File Structure:**

```
backend/
├── app/
│   ├── api/
│   │   ├── health.py
│   │   ├── schema.py
│   │   ├── sheets.py
│   │   └── test_unified.py
│   ├── core/
│   ├── services/
│   │   ├── sheets_service.py
│   │   ├── tba_client.py
│   │   ├── statbotics_client.py
│   │   ├── scouting_parser.py
│   │   ├── superscout_parser.py
│   │   ├── schema_loader.py
│   │   └── unified_event_data_service.py
│   ├── main.py
│   └── data/
│       ├── schema_2025.json
│       ├── schema_superscout_2025.json
│       └── unified_event_2025arc.json
└── tests/
    ├── test_health.py
    └── test_statbotics_pull.py
frontend/
├── src/
    ├── main.tsx
    ├── App.tsx
    └── components/ (placeholder for UI components)
```

---

**Key Notes and Corrections:**
- Originally, important fields like `Qual Number` (Match Number) were wrongly set to "ignore" during schema mapping.
- Parsing fix planned to ensure match linkage is preserved for data validation.
- Statbotics data currently pulled is **season-wide normalized EPA (norm_epa)**, **NOT** event-specific EPA.
  - Future upgrade: Use Statbotics `/event_team/<event>/<team>` if per-event EPA is needed.

---

**Testing and Health Checks:**
- `test_health.py` validates:
  - Schema loading
  - Google Sheets connection
  - TBA API connection
  - Statbotics data pull
- `test_statbotics_pull.py` manually checks active team pulling and handles pagination.

---

**Known Limitations (Next Upgrades):**
- Need Match Number (`Qual Number`) included in all scouting rows.
- Data Validation service to detect missing teams/matches.
- Virtual Scouting module for manually entering missing matches.
- Picklist Builder (Phase 2).
- Optional: Pull real EPA breakdowns (Auto, Teleop, Endgame) if needed.

---

**Next Steps:**
- Fix scouting schema to map `Qual Number` and `Match Key`.
- Rebuild Unified Dataset including Match linkage.
- Build Data Completeness Checklist (team/match validation).
- Design frontend trigger for building datasets on demand.

---

**Final Status (as of April 26, 2025):**
- Core backend services built and validated.
- Unified Event Dataset builder working with Scouting, Superscouting, TBA, and Statbotics data.
- Ready to move into Data Validation phase!

---

(Generated based on the full context of our Project Build from April 25–26, 2025.)


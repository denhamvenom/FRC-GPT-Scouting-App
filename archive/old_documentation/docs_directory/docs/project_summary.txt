# docs/project_summary.txt

## North-Star Goal  
Build a **local FastAPI + React scouting assistant** that cleans data, generates pick lists, and supports live alliance selection — all from Google Sheets, The Blue Alliance, and GPT-4.1.

---

## Core Modules & Windows

| Module | Purpose |
|--------|---------|
| **Setup** | Select season → authenticate Sheets → choose event (TBA pull) → *Dynamic Schema-Learning* button. |
| **Schema-Learning** | GPT scans sheet headers, maps to generic tags (`team_num`, `auto_score`, etc.), shows wizard for user corrections, saves `schema_<season>.json`. |
| **Data Cleanup** | End-of-day verifier. 1) **Missing-Match Check**. 2) **Anomaly Detector** (±2 σ). Flags create To-Do list. |
| **Virtual Scout** | UI to fill gaps: average data, manual entry, or GPT-assisted estimate. |
| **Pick-List Strategy** | User writes bullet goals for 1st / 2nd (/ 3rd) picks, blacklist teams. GPT can auto-suggest strategy based on stats. |
| **Pick-List Generator** | Combines Scouting Tab, SuperScouting Tab, strategy bullets → outputs ranked pick lists with detailed GPT rationales. Includes qualitative superscouting metrics and handles both structured and natural language strategy descriptions. Real-time progress tracking with percentage updates. |
| **Alliance Selection** | Realistic exclusion of alliance captains for 2nd/3rd picks; real-time draft board that filters remaining teams; GPT offers contextual recommendations. Supports full 3-round selection with FRC rules compliance. |
| **Event Archive** | Complete backup of event data including team lists, datasets, and picklists. Enables historical analysis and recovery. |
| **Progress Tracking** | Real-time status updates for long-running operations with percentage completion and time estimates. |

---

## MVP vs V2

| Must-Have (v1) | Nice-to-Have (v2) |
|---------------|-------------------|
| Setup + Schema wizard | OAuth flow for multiple users |
| Data Cleanup verifier | Auto-fetch YouTube match links |
| Pick-List strategy + generator | Voice-command Q&A |
| Live Draft Board | Mobile React Native shell |
| Progress tracking | Real-time collaboration |
| Event archival | Cloud deployment (AWS/Azure) |

---

## Tech Decisions & Practices

* **FastAPI async** + `httpx.AsyncClient` for TBA & GPT calls
* **React tabs**: Setup | Cleanup | Strategy | Pick List | Live Draft
* **Threading/Executor** for heavy API work; UI stays responsive with progress tracking
* **Ultra-Compact JSON**: 75% token reduction for GPT responses
* **SQLite Database**: Persistent storage for locked picklists and alliance selections
* **LocalStorage**: Frontend state persistence across page navigation
* **Cost Logger**: middleware records tokens × cost to `usage_log.csv`
* **Offline Mode**: JSON cache for TBA + Sheets; pick lists saved locally
* **CI**: GitHub Actions runs `ruff`, `black`, `mypy`, `pytest`, React tests

---

## Folder Skeleton
```
backend/
├── app/
│   ├── api/        # FastAPI endpoints
│   ├── services/   # Business logic
│   ├── database/   # SQLAlchemy models
│   ├── config/     # Year-specific configs
│   └── main.py
├── tests/
└── requirements.txt

frontend/
├── src/
│   ├── pages/      # Page components
│   ├── components/ # Reusable UI
│   └── services/   # API calls
├── public/
└── package.json
```

---

## Development Phases

1. **Bootstrap** – health endpoint + React fetch ✓
2. **Google Auth & Schema Wizard** ✓
3. **TBA sync service** ✓
4. **Data Cleanup logic + To-Do view** ✓
5. **Pick-List generator + CSV export** ✓
6. **Live Draft Board** ✓
7. **Progress tracking + UI feedback** ✓
8. **Event archival system** ✓
9. **Polish, tests, CI** (ongoing)

---

## Key Features (Current State)

### Data Management
* Unified dataset building from Sheets, TBA, and Statbotics
* Schema mapping with user corrections
* LocalStorage persistence for UI state
* Event archival with complete backup

### Validation
* Missing data detection with virtual rescouting
* Statistical outlier detection (Z-score, IQR, team-specific)
* Audit trail for all corrections
* Mark outliers as acceptable with reasons

### Picklist Generation
* Ultra-compact JSON format (75% token reduction)
* Real-time progress tracking with percentage updates
* Natural language strategy parsing
* Team exclusion based on pick position
* Batch processing for large events
* Automatic fallback for missing teams

### Alliance Selection
* FRC rules compliant (declined teams can be captains)
* Live draft board with real-time updates
* Three-round selection with backup picks
* Visual status indicators for all teams
* Database persistence for selections

### User Experience
* Progress indicators for long operations
* Error recovery with fallback mechanisms
* Pagination for large datasets
* Confirmation dialogs for data operations
* Debug logging with viewer UI

---

*(Last updated 2025-05-19)*
name: Release Automation

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string
      pre_release:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: "3.9"
  NODE_VERSION: "18"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.pre_release }}"
          else
            VERSION="${GITHUB_REF#refs/tags/}"
            # Check if it's a pre-release (contains alpha, beta, rc)
            if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
              IS_PRERELEASE=true
            else
              IS_PRERELEASE=false
            fi
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          echo "Pre-release: $IS_PRERELEASE"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[0-9]+)?)?$ ]]; then
            echo "Invalid version format: $VERSION"
            echo "Expected format: vX.Y.Z or vX.Y.Z-suffix"
            exit 1
          fi

      - name: Check if version exists
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if git tag -l | grep -q "^$VERSION$"; then
            echo "Version $VERSION already exists!"
            exit 1
          fi

  run-tests:
    name: Run Full Test Suite
    needs: validate-release
    uses: ./.github/workflows/ci.yml

  run-quality-checks:
    name: Run Quality Checks
    needs: validate-release
    uses: ./.github/workflows/quality-checks.yml

  run-security-scan:
    name: Run Security Scan
    needs: validate-release
    uses: ./.github/workflows/security-scan.yml

  build-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: [validate-release, run-tests, run-quality-checks]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install Python dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install build wheel

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Build frontend
        working-directory: frontend
        run: |
          npm run build
          tar -czf ../frontend-dist-${{ needs.validate-release.outputs.version }}.tar.gz dist/

      - name: Build Python package
        working-directory: backend
        run: |
          python -m build
          ls -la dist/

      - name: Create source archive
        run: |
          git archive --format=tar.gz --prefix=frc-scouting-app-${{ needs.validate-release.outputs.version }}/ HEAD > source-${{ needs.validate-release.outputs.version }}.tar.gz

      - name: Generate checksums
        run: |
          sha256sum frontend-dist-${{ needs.validate-release.outputs.version }}.tar.gz > checksums.txt
          sha256sum source-${{ needs.validate-release.outputs.version }}.tar.gz >> checksums.txt
          find backend/dist -type f -exec sha256sum {} \; >> checksums.txt

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ needs.validate-release.outputs.version }}
          path: |
            frontend-dist-${{ needs.validate-release.outputs.version }}.tar.gz
            source-${{ needs.validate-release.outputs.version }}.tar.gz
            backend/dist/*
            checksums.txt
          retention-days: 30

  build-docker-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [validate-release, run-tests, run-quality-checks]
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  generate-changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: validate-release
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # Get the previous tag
          PREVIOUS_TAG=$(git tag -l --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | head -2 | tail -1)
          if [[ -z "$PREVIOUS_TAG" ]]; then
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
          fi
          
          echo "Generating changelog from $PREVIOUS_TAG to $VERSION"
          
          # Generate changelog
          CHANGELOG=$(cat << 'EOF'
          ## What's Changed
          
          ### 🚀 Features
          EOF
          )
          
          # Add feature commits
          git log --oneline --grep="feat" --grep="add" --grep="implement" $PREVIOUS_TAG..HEAD --format="- %s" | head -10 | while read line; do
            CHANGELOG="$CHANGELOG\n$line"
          done
          
          CHANGELOG="$CHANGELOG\n\n### 🐛 Bug Fixes\n"
          
          # Add bug fix commits
          git log --oneline --grep="fix" --grep="bug" $PREVIOUS_TAG..HEAD --format="- %s" | head -10 | while read line; do
            CHANGELOG="$CHANGELOG\n$line"
          done
          
          CHANGELOG="$CHANGELOG\n\n### 🔄 Other Changes\n"
          
          # Add other significant commits
          git log --oneline $PREVIOUS_TAG..HEAD --format="- %s" | grep -v -E "(feat|fix|bug|add|implement)" | head -5 | while read line; do
            CHANGELOG="$CHANGELOG\n$line"
          done
          
          CHANGELOG="$CHANGELOG\n\n**Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$VERSION"
          
          # Save changelog to output (escape newlines)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo -e "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-artifacts, build-docker-images, generate-changelog, run-security-scan]
    permissions:
      contents: write
      packages: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts-${{ needs.validate-release.outputs.version }}
          path: ./release-assets

      - name: Create Git tag
        if: github.event_name == 'workflow_dispatch'
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$VERSION" -m "Release $VERSION"
          git push origin "$VERSION"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          name: Release ${{ needs.validate-release.outputs.version }}
          body: ${{ needs.generate-changelog.outputs.changelog }}
          prerelease: ${{ needs.validate-release.outputs.is_prerelease }}
          files: |
            release-assets/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [create-release]
    if: ${{ !needs.validate-release.outputs.is_prerelease }}
    environment:
      name: staging
      url: https://staging.frc-scouting.example.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "🚀 Deploying ${{ needs.validate-release.outputs.version }} to staging..."
          echo "This would typically:"
          echo "- Update staging environment with new Docker images"
          echo "- Run database migrations"
          echo "- Update configuration"
          echo "- Verify deployment health"
          echo "✅ Staging deployment completed successfully"

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [validate-release, create-release, deploy-staging]
    if: always() && needs.create-release.result == 'success'
    
    steps:
      - name: Notify success
        run: |
          echo "## 🎉 Release ${{ needs.validate-release.outputs.version }} Created Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Release Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Pre-release**: ${{ needs.validate-release.outputs.is_prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker Images**: Available in GitHub Container Registry" >> $GITHUB_STEP_SUMMARY
          echo "- **Staging Deployment**: ${{ needs.deploy-staging.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Verify the release in GitHub Releases" >> $GITHUB_STEP_SUMMARY
          echo "2. Test the staging deployment" >> $GITHUB_STEP_SUMMARY
          echo "3. Consider promoting to production" >> $GITHUB_STEP_SUMMARY

      - name: Notify failure
        if: failure()
        run: |
          echo "## ❌ Release ${{ needs.validate-release.outputs.version }} Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Please check the workflow logs for details and resolve any issues." >> $GITHUB_STEP_SUMMARY
name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.9"
  NODE_VERSION: "18"

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      dependencies: ${{ steps.changes.outputs.dependencies }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
              - 'pyproject.toml'
              - 'requirements*.txt'
              - '.github/workflows/**'
            frontend:
              - 'frontend/**'
              - '.github/workflows/**'
            dependencies:
              - 'backend/requirements*.txt'
              - 'frontend/package*.json'
              - 'pyproject.toml'

  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend == 'true'
    
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('backend/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install backend dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Create test environment file
        working-directory: backend
        run: |
          cat > .env << EOF
          OPENAI_API_KEY=test_key_for_ci
          TBA_API_KEY=test_key_for_ci
          GOOGLE_SHEET_ID=test_sheet_id
          GOOGLE_SERVICE_ACCOUNT_FILE=test_path
          EOF

      - name: Run backend tests
        working-directory: backend
        run: |
          python -m pytest -v --tb=short --cov=app --cov-report=xml --cov-report=term-missing
        env:
          PYTHONPATH: ${{ github.workspace }}/backend

      - name: Upload backend coverage to Codecov
        if: matrix.python-version == '3.9'
        uses: codecov/codecov-action@v4
        with:
          file: backend/coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend == 'true'
    
    strategy:
      matrix:
        node-version: ["18", "20"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Run frontend tests
        working-directory: frontend
        run: |
          npm run test:run
          npm run coverage

      - name: Upload frontend coverage to Codecov
        if: matrix.node-version == '18'
        uses: codecov/codecov-action@v4
        with:
          file: frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: [detect-changes, backend-tests]
    if: needs.detect-changes.outputs.backend == 'true' && (success() || needs.backend-tests.result == 'skipped')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Test backend startup
        working-directory: backend
        run: |
          timeout 30s python -c "
          import sys
          sys.path.append('.')
          from app.main import app
          print('Backend app imports successfully')
          " || (echo 'Backend startup test failed' && exit 1)

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: [detect-changes, frontend-tests]
    if: needs.detect-changes.outputs.frontend == 'true' && (success() || needs.frontend-tests.result == 'skipped')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Build frontend
        working-directory: frontend
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ github.sha }}
          path: frontend/dist/
          retention-days: 7

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [detect-changes, backend-tests, frontend-tests]
    if: |
      always() && 
      (needs.detect-changes.outputs.backend == 'true' || needs.detect-changes.outputs.frontend == 'true') &&
      (needs.backend-tests.result == 'success' || needs.backend-tests.result == 'skipped') &&
      (needs.frontend-tests.result == 'success' || needs.frontend-tests.result == 'skipped')
    
    services:
      # Add any external services needed for integration tests
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install backend dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Create test environment
        working-directory: backend
        run: |
          cat > .env << EOF
          OPENAI_API_KEY=test_key_for_integration
          TBA_API_KEY=test_key_for_integration
          GOOGLE_SHEET_ID=test_sheet_id
          GOOGLE_SERVICE_ACCOUNT_FILE=test_path
          EOF

      - name: Run integration tests
        working-directory: backend
        run: |
          python -m pytest tests/ -m integration -v --tb=short
        env:
          PYTHONPATH: ${{ github.workspace }}/backend

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [detect-changes]
    if: needs.detect-changes.outputs.backend == 'true' || needs.detect-changes.outputs.frontend == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test Docker build
        run: |
          if [ -f Dockerfile ]; then
            docker build --no-cache --progress=plain .
          elif [ -f docker-compose.yml ]; then
            docker-compose build --no-cache
          else
            echo "No Docker configuration found, skipping Docker build test"
          fi

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, build-backend, build-frontend, integration-tests, docker-build]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate summary
        run: |
          echo "## CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Tests | ${{ needs.backend-tests.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Tests | ${{ needs.frontend-tests.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend Build | ${{ needs.build-backend.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Frontend Build | ${{ needs.build-frontend.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.docker-build.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check if any critical job failed
          if [[ "${{ needs.backend-tests.result }}" == "failure" ]] || 
             [[ "${{ needs.frontend-tests.result }}" == "failure" ]] || 
             [[ "${{ needs.build-backend.result }}" == "failure" ]] || 
             [[ "${{ needs.build-frontend.result }}" == "failure" ]]; then
            echo "❌ **CI Pipeline Failed** - One or more critical jobs failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ **CI Pipeline Passed** - All jobs completed successfully" >> $GITHUB_STEP_SUMMARY
          fi
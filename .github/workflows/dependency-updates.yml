name: Dependency Updates

on:
  schedule:
    # Run weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '20'

jobs:
  check-outdated:
    name: Check Outdated Dependencies
    runs-on: ubuntu-latest
    outputs:
      python-outdated: ${{ steps.python-check.outputs.outdated }}
      node-outdated: ${{ steps.node-check.outputs.outdated }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Check Python outdated packages
        id: python-check
        run: |
          cd backend
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          OUTDATED=$(pip list --outdated --format=json)
          if [ "$OUTDATED" != "[]" ]; then
            echo "outdated=true" >> $GITHUB_OUTPUT
            echo "Outdated Python packages:"
            echo "$OUTDATED" | jq -r '.[] | "\(.name): \(.version) -> \(.latest_version)"'
          else
            echo "outdated=false" >> $GITHUB_OUTPUT
            echo "All Python packages are up to date"
          fi
      
      - name: Check Node.js outdated packages
        id: node-check
        run: |
          cd frontend
          npm install
          OUTDATED=$(npm outdated --json || echo "{}")
          if [ "$OUTDATED" != "{}" ]; then
            echo "outdated=true" >> $GITHUB_OUTPUT
            echo "Outdated Node.js packages:"
            echo "$OUTDATED" | jq -r 'to_entries[] | "\(.key): \(.value.current) -> \(.value.wanted)"'
          else
            echo "outdated=false" >> $GITHUB_OUTPUT
            echo "All Node.js packages are up to date"
          fi

  update-python:
    name: Update Python Dependencies
    runs-on: ubuntu-latest
    needs: check-outdated
    if: needs.check-outdated.outputs.python-outdated == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install pip-tools
        run: pip install pip-tools
      
      - name: Update requirements
        run: |
          cd backend
          # Backup current requirements
          cp requirements.txt requirements.txt.bak
          cp requirements-dev.txt requirements-dev.txt.bak
          
          # Update requirements
          pip-compile --upgrade requirements.in || echo "No requirements.in found"
          pip-compile --upgrade requirements-dev.in || echo "No requirements-dev.in found"
          
          # If no .in files, update based on current requirements
          if [ ! -f requirements.in ]; then
            pip install -r requirements.txt
            pip freeze > requirements.txt.new
            mv requirements.txt.new requirements.txt
          fi
          
          if [ ! -f requirements-dev.in ]; then
            pip install -r requirements-dev.txt
            pip freeze > requirements-dev.txt.new
            mv requirements-dev.txt.new requirements-dev.txt
          fi
      
      - name: Test updated dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pytest --tb=short || echo "Tests failed with updated dependencies"
      
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore(deps): update Python dependencies'
          title: 'chore(deps): Update Python dependencies'
          body: |
            ## Automated Python Dependency Update
            
            This PR updates Python dependencies to their latest versions.
            
            ### Changes
            - Updated backend dependencies
            - Ran test suite to verify compatibility
            
            ### Testing
            - [ ] All tests pass
            - [ ] Manual testing completed
            
            Auto-generated by GitHub Actions dependency update workflow.
          branch: update/python-dependencies
          delete-branch: true
          labels: |
            dependencies
            python
            automated

  update-node:
    name: Update Node.js Dependencies
    runs-on: ubuntu-latest
    needs: check-outdated
    if: needs.check-outdated.outputs.node-outdated == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Update dependencies
        run: |
          cd frontend
          # Backup current package files
          cp package.json package.json.bak
          cp package-lock.json package-lock.json.bak
          
          # Update dependencies (non-breaking updates only)
          npm update
          
          # Update devDependencies
          npm update --dev
      
      - name: Test updated dependencies
        run: |
          cd frontend
          npm run build || echo "Build failed with updated dependencies"
          npm run test 2>/dev/null || echo "Tests failed with updated dependencies"
      
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore(deps): update Node.js dependencies'
          title: 'chore(deps): Update Node.js dependencies'
          body: |
            ## Automated Node.js Dependency Update
            
            This PR updates Node.js dependencies to their latest compatible versions.
            
            ### Changes
            - Updated frontend dependencies
            - Ran build process to verify compatibility
            
            ### Testing
            - [ ] Build passes
            - [ ] All tests pass
            - [ ] Manual testing completed
            
            Auto-generated by GitHub Actions dependency update workflow.
          branch: update/node-dependencies
          delete-branch: true
          labels: |
            dependencies
            javascript
            automated

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Python security audit
        run: |
          cd backend
          pip install safety
          pip install -r requirements.txt
          safety check --json > python-security-report.json || true
          if [ -s python-security-report.json ]; then
            echo "Python security vulnerabilities found"
            cat python-security-report.json
          fi
      
      - name: Node.js security audit
        run: |
          cd frontend
          npm install
          npm audit --audit-level moderate --json > node-security-report.json || true
          if [ -s node-security-report.json ]; then
            echo "Node.js security vulnerabilities found"
            cat node-security-report.json
          fi
      
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            backend/python-security-report.json
            frontend/node-security-report.json
          retention-days: 30